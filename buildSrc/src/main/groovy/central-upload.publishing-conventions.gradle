plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id "com.palantir.git-version"
}

def static versionLabel(gitInfo) {
    def branch = gitInfo.branchName // all branches are snapshots, only tags get released
    def tag = gitInfo.lastTag
    // tag is returned as is. Branch may need cleanup
    return branch == null ? tag : 99 + "." + branch.replace("/", "-") + "-SNAPSHOT"
}

def tmp_version = project.findProperty("versionOverride") ?: versionLabel(versionDetails())

group = 'io.github.opendcs.maven'
version = tmp_version

/**
 * Conditionally apply self once available.
 */
def f = new File("${rootDir}/maven-central-upload/build/libs/maven-central-upload-${tmp_version}.jar")
if (f.exists()) {
    plugins.apply('io.github.opendcs.maven.maven-central-upload')
}


ext.shouldSign = (project.findProperty("sign") ?: "false") == "true"

if (shouldSign) {
    /*
    Either sigstore is not compatiable with lazy evaluation OR this plugin isn't doing it right
    needs more investigation.

    plugins.apply('dev.sigstore.sign')

    sigstoreSign {
        oidcClient {
            gitHub {
                audience.set("sigstore")
            }

            web {
                clientId.set("sigstore")
                issuer.set("https://oauth2.sigstore.dev/auth")
            }
        }
    }*/

    signing {
        def signingKey = project.getProperty("signingKey").trim().replace("\n","")
        def signingPassword = project.getProperty("signingKeyPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            pom {
                url = 'https://github.com/opendcs/maven-central-uploader'

                scm {
                    connection = 'scm:git:https://github.com/opendcs/maven-central-uploader.git'
                    developerConnection = 'scm:git:ssh://git@github.com:opendcs/maven-central-uploader.git'
                    url = 'https://github.com/opendcs/maven-central-uploader'
                }

                licenses {
                    license {
                        name = 'CC0 1.0 Universal'
                        url = 'https://creativecommons.org/publicdomain/zero/1.0/legalcode'
                    }
                }

                developers {
                    developer {
                        id = 'opendcs'
                        name = 'The OpenDCS Team'
                        email = 'https://github.com/opendcs'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releaseUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            def user = project.findProperty("ossrhUsername")
            def passwd = project.findProperty("ossrhPassword")
            name = 'MavenCentral'
            url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl
            credentials {
                username = user
                password = passwd
            }
        }
        mavenLocal()
        maven {
            name = "mavenCentralApi"
            url = "https://central.sonatype.com"
            def user = project.findProperty("centralApiUsername")
            def passwd = project.findProperty("centralApiPassword")
            credentials {
                username = user
                password = passwd
            }
        }
    }
}
