/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.13/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'central-upload.publishing-conventions'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    api project(":central-api")
    api project(":uploader")
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testImplementation(libs.org.mock.server)

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def projectDescription  = """
    Uses existing Maven-Publish setup and bundles for and uploads to 
    the new maven central api.
""".stripIndent()

def projectName = "OpenDCS Maven Central Upload Plugin"

gradlePlugin {
    // Define the plugin
    plugins {
        mavenCentralUpload {
            id = 'io.github.opendcs.maven-central-upload'
            displayName = projectName
            implementationClass = 'org.opendcs.MavenCentralUploadPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

if (shouldSign) {
    signing {
        sign publishing.publications.maven
    }
}


publishing.publications.withType(MavenPublication) {
    pom {
        name = projectName
        description = projectDescription
        url = 'https://github.com/opendcs/maven-central-upload'

        scm {
            connection = 'scm:git:https://github.com/opendcs/maven-central-upload'
            developerConnection = 'scm:git:ssh://git@github.com:opendcs/maven-central-upload.git'
            url = 'https://github.com/opendcs/gherkin-to-kiwi'
        }

        licenses {
            license {
                name = 'CC0 1.0 Universal'
                url = 'https://creativecommons.org/publicdomain/zero/1.0/legalcode'
            }
        }

        developers {
            developer {
                id = 'opendcs'
                name = 'The OpenDCS Team'
                email = 'https://github.com/opendcs'
            }
        }
    }
}