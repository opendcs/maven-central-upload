/*
 * This source file was generated by the Gradle 'init' task
 */
package org.opendcs;

import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.artifacts.repositories.ArtifactRepository;
import org.gradle.api.artifacts.repositories.MavenArtifactRepository;
import org.gradle.api.publish.PublishingExtension;
import org.gradle.api.publish.maven.MavenPublication;
import org.gradle.api.publish.maven.tasks.PublishToMavenLocal;
import org.gradle.api.specs.Spec;
import org.gradle.api.tasks.bundling.Zip;

import java.nio.file.Files;
import java.util.ArrayList;

import org.gradle.api.Plugin;

/**
 * A simple 'hello world' plugin.
 */
public class MavenCentralUploadPlugin implements Plugin<Project> {
    @Override
    public void apply(Project project) {
        project.getPluginManager().withPlugin("maven-publish", publishPlugin ->
        {
            project.afterEvaluate(p ->
            {
                final var publishTasks = p.getTasks().withType(PublishToMavenLocal.class);

                var repos = p.getExtensions().getByType(PublishingExtension.class).getRepositories();
                final ArtifactRepository remote = repos.getAt("mavenCentralApi");
                final MavenArtifactRepository mavenLocal = repos.mavenLocal();

                var tasks = p.getTasks();
  
                final var assembleTask = tasks.register("assembleCentralApiBundle", AssembleBundleTask.class, task ->
                {
                    task.dependsOn(publishTasks);
                    task.setGroup("publishing");
                });

                final var zipBundleTask = tasks.register("zipCentralApiBundle", Zip.class, task ->
                {
                    task.dependsOn(assembleTask);
                    task.setGroup("publishing");
                    var spec = new Spec<Task>() {
                        @Override
                        public boolean isSatisfiedBy(Task arg0) {
                            return false;
                        }
                    };
                    
                    task.getOutputs().upToDateWhen(spec);
                    final var localUrl = mavenLocal.getUrl();
                    final var group = (String)p.getGroup();
                    final var bundleBase = String.format("%s%s",localUrl.toString(), group.replaceAll("\\.","/"));
                    final var version = (String)p.getVersion();
                    task.getArchiveBaseName().set("central-api-bundle");
                    task.getDestinationDirectory().set(p.getLayout().getBuildDirectory());
                    task.from(bundleBase).filesMatching(".*" + version + ".*", null);
                    task.doLast(s ->
                    {
                        var archiveFile = task.getArchiveFile().get().getAsFile();
                        System.out.println("Base" + bundleBase + " version " + version);
                        System.out.println(archiveFile.getAbsolutePath());
                        System.out.println(archiveFile.length()/1024.0/1024.0 + " MB");
                    });
                });

                tasks.register("publishToMavenCentralApi", PublishToMavenCentral.class, task ->
                {
                    task.remote = (MavenArtifactRepository)remote;
                    task.bundle = zipBundleTask.get().getArchiveFile();
                    task.setGroup("publishing");
                    task.dependsOn(assembleTask);
                    task.doLast(s ->
                    {
                        System.out.println("Hello from plugin 'org.opendcs.maven-central-upload'");
                    });
               });
            });
            
        });
    }
}
