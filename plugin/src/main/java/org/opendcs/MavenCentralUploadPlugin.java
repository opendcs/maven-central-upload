/*
 * This source file was generated by the Gradle 'init' task
 */
package org.opendcs;

import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.artifacts.repositories.ArtifactRepository;
import org.gradle.api.artifacts.repositories.MavenArtifactRepository;
import org.gradle.api.file.RegularFile;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.internal.file.ManagedFactories.RegularFilePropertyManagedFactory;
import org.gradle.api.publish.PublishingExtension;
import org.gradle.api.publish.maven.MavenPublication;
import org.gradle.api.publish.maven.tasks.GenerateMavenPom;
import org.gradle.api.publish.maven.tasks.PublishToMavenLocal;
import org.gradle.api.specs.Spec;
import org.gradle.api.tasks.bundling.Zip;

import java.nio.file.Files;
import java.util.ArrayList;

import org.gradle.api.Plugin;

/**
 * A simple 'hello world' plugin.
 */
public class MavenCentralUploadPlugin implements Plugin<Project> {
    private static final String GROUP = "Central API";
    private static final String PUBLISH_ALL_TASK = "publishAllToNewMavenCentralApi";
    private static final String CENTRAL_API_SUFFIX = "NewCentralApi";


    @Override
    public void apply(Project project)
    {   
        project.getPluginManager().withPlugin("maven-publish", publishPlugin ->
        {
            var tasks = project.getTasks();
            var extension = project.getExtensions().findByType(PublishingExtension.class);
            
            if (extension != null)
            {
                tasks.register(PUBLISH_ALL_TASK, task ->
                {
                    task.setGroup(GROUP);
                });
                extension.getPublications().withType(MavenPublication.class).all(pub ->
                {
                    final var name = pub.getName();
                    final var pubName = Character.toTitleCase(name.charAt(0)) + name.substring(1);
                    final var assembleTask = tasks.register("assemble"+pubName+CENTRAL_API_SUFFIX+"CentralApiBundle", AssembleBundleTask.class, task ->
                    {
                        task.outputDirectory.set(project.getLayout().getBuildDirectory().dir("bundle/"+name));
                        task.publication.set(pub);
                        pub.getArtifacts().all(a -> task.dependsOn(a.getBuildDependencies()));
                        task.dependsOn(tasks.named("generatePomFileFor"+pubName+"Publication"));
                        task.setGroup(GROUP);            
                    });

                    final var zipBundleTask = tasks.register("zip"+pubName+CENTRAL_API_SUFFIX+"Bundle", Zip.class, task ->
                    {
                        task.getInputs().dir(assembleTask.get().getOutputDirectory());
                        task.dependsOn(assembleTask);
                        task.setGroup(GROUP);
                        task.getArchiveBaseName().set("central-api-bundle-for-"+pubName);
                        task.getDestinationDirectory().set(project.getLayout().getBuildDirectory());
                        task.from(assembleTask.get().getOutputs());
                        task.getOutputs().file(task.getArchiveFile());
                    });
        
                    final var publishTask = tasks.register("publish"+pubName+"To"+CENTRAL_API_SUFFIX, PublishToMavenCentral.class, task ->
                    {
                        var repos = extension.getRepositories();
                        final ArtifactRepository remote = repos.findByName("mavenCentralApi");
                        task.getInputs().file(zipBundleTask.get().getArchiveFile().get());
                        task.dependsOn(zipBundleTask);
                        task.remote = (MavenArtifactRepository)remote;
                        task.bundle.set(zipBundleTask.get().getArchiveFile());
        
                        task.setGroup(GROUP);
                        task.doLast(s ->
                        {
                            System.out.println("Hello from plugin 'org.opendcs.maven-central-upload'");
                        });
                
                    });
                    tasks.named(PUBLISH_ALL_TASK, t -> t.dependsOn(publishTask));
                });

            
            }        
        });
    }
}
